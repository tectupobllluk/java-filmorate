DROP TABLE IF EXISTS
    events,
    mpa,
    users,
    films,
    genres,
    film_genre,
    friends,
    likes,
    reviews,
    useful_review,
    directors,
    film_directors,
    operation_types,
    event_types;

CREATE TABLE mpa (
    mpa_id INTEGER PRIMARY KEY,
    mpa_name VARCHAR NOT NULL
);

CREATE TABLE users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR NOT NULL UNIQUE,
    login VARCHAR NOT NULL UNIQUE,
    name VARCHAR,
    birthday DATE NOT NULL
);

CREATE TABLE films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL,
    description VARCHAR NOT NULL,
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    mpa_id INTEGER NOT NULL,
    CONSTRAINT fk_film_mpa FOREIGN KEY (mpa_id) REFERENCES mpa (mpa_id)
);

CREATE TABLE genres (
    genre_id INTEGER PRIMARY KEY,
    genre_name VARCHAR NOT NULL
);

CREATE TABLE film_genre (
    film_id INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_genre_films FOREIGN KEY (film_id)
    REFERENCES films (film_id) ON DELETE CASCADE,
    CONSTRAINT fk_film_genres FOREIGN KEY (genre_id)
    REFERENCES genres (genre_id) ON DELETE CASCADE
);

CREATE TABLE friends (
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    PRIMARY KEY (user_id, friend_id),
    CONSTRAINT fk_user FOREIGN KEY (user_id)
    REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT fk_friend FOREIGN KEY (friend_id)
    REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE likes (
    film_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    PRIMARY KEY (film_id, user_id),
    CONSTRAINT fk_film_like FOREIGN KEY (film_id)
    REFERENCES films (film_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_like FOREIGN KEY (user_id)
    REFERENCES users (user_id) ON DELETE CASCADE
    );

CREATE TABLE directors (
    director_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_name VARCHAR NOT NULL
);

CREATE TABLE film_directors (
    film_id  INTEGER NOT NULL,
    director_id INTEGER NOT NULL,
    PRIMARY KEY (film_id, director_id),
    CONSTRAINT fk_director_films FOREIGN KEY (film_id)
    REFERENCES films (film_id) ON DELETE CASCADE,
    CONSTRAINT fk_film_directors FOREIGN KEY (director_id)
    REFERENCES directors (director_id) ON DELETE CASCADE
);

CREATE TABLE reviews (
    review_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content_review VARCHAR NOT NULL,
    is_positive BOOLEAN NOT NULL,
    film_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    CONSTRAINT fk_film_review FOREIGN KEY (film_id)
    REFERENCES films (film_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_review FOREIGN KEY (user_id)
    REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE useful_review (
    review_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    useful INTEGER NOT NULL,
    PRIMARY KEY (review_id, user_id),
    CONSTRAINT fk_review_useful FOREIGN KEY (review_id)
    REFERENCES reviews (review_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_useful FOREIGN KEY (user_id)
    REFERENCES users (user_id) ON DELETE CASCADE
);

CREATE TABLE event_types (
    type_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type_name VARCHAR NOT NULL
);

CREATE TABLE operation_types (
    operation_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    operation_name VARCHAR NOT NULL
);

CREATE TABLE events (
    event_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    time_stamp REAL NOT NULL,
    user_id INTEGER NOT NULL,
    event_type INTEGER NOT NULL,
    operation_type INTEGER NOT NULL,
    entity_id INTEGER NOT NULL,
    CONSTRAINT user_id_con FOREIGN KEY (user_id)
    REFERENCES users(user_id) ON DELETE CASCADE,
    CONSTRAINT event_type_con FOREIGN KEY (event_type)
    REFERENCES event_types (type_id),
    CONSTRAINT operation_type_con FOREIGN KEY (operation_type)
    REFERENCES operation_types (operation_id)
);
